package com.github.cardreader.sdk.reading.emv;

import java.util.EnumSet;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import lombok.Getter;

/**
 * @see "https://raw.githubusercontent.com/sasc999/javaemvreader/master/src/main/java/sasc/emv/EMVTags.java"
 */
@Getter
public enum NamedEmvTag {
  TERMINAL_TRANSACTION_QUALIFIERS("9F66", "Indicates reader capabilities, requirements, and preferences to the card"),
  TERMINAL_COUNTRY_CODE("9F1A", "Indicates the country of the terminal, represented according to ISO 3166"),
  TRANSACTION_CURRENCY_CODE("5F2A", "Indicates the currency code of the transaction according to ISO 4217"),
  AMOUNT_AUTHORISED_NUMERIC("9F02", "Authorised amount of the transaction (excluding adjustments)"),
  UNPREDICTABLE_NUMBER("9F37", "Value to provide variability and uniqueness to the generation of a cryptogram"),
  PDOL("9F38",
      "Contains a list of terminal resident data objects (tags and lengths) needed by the ICC in processing the GET PROCESSING OPTIONS command"),
  CID("9F27", "Cryptogram Information Data - Indicates the type of cryptogram and the actions to be performed by the terminal"),
  ATC("9F36", "Application Transaction Counter - Counter maintained by the application in the ICC (incrementing the ATC is managed by the ICC)"),
  ICC_PUBLIC_KEY_EXP("9F47",
      "ICC Public Key Exponent used for the verification of the Signed Dynamic Application Data"),
  ICC_PUBLIC_KEY_CERT("9F46", "ICC Public Key certified by the issuer"),
  ICC_PUBLIC_KEY_REMAINDER("9F48", "Remaining digits of the ICC Public Key Modulus"),
  STATIC_DATA_AUTH_LIST("9F4A",
      "List of tags of primitive data objects defined in this specification whose value fields are to be included in the Signed Static or Dynamic Application Data"),
  ICC_DYNAMIC_NUMBER("9F4C", "Time-variant number generated by the ICC, to be captured by the terminal"),
  TRANSACTION_TIME("9F21", "Local time that the transaction was authorised - HHMMSS"),
  TRANSACTION_DATE("9A", "Local date that the transaction was authorised - YYMMDD"),
  CVM_RESULT("9F34", "Indicates the results of the last CVM (Cardholder Verification Method) performed"),
  TERMINAL_TYPE("9F35",
      "Indicates the environment of the terminal, its communications capability, and its operational control"),
  CA_PUBLIC_KEY_INDEX_CARD("8F",
      "Identifies the certification authority's public key in conjunction with the RID"),
  AIP("82",
      "Application Interchange Profile - Indicates the capabilities of the card to support specific functions in the application"),
  AFL("94",
      "Application File Locator - Indicates the location (SFI, range of records) of the AEFs related to a given application"),
  ISSUER_APP_DATA("9F10", "Contains proprietary application data for transmission to the issuer in an online transaction."),
  SDAD("9F4B", "Signed Dynamic Application Data - Digital signature on critical application parameters for DDA or CDA"),
  ISSUER_PUBLIC_KEY_EXPONENT("9F32",
      "Issuer public key exponent used for the verification of the Signed Static Application Data and the ICC Public Key Certificate"),
  ISSUER_PUBLIC_KEY_REMAINDER("92", "Remaining digits of the Issuer Public Key Modulus"),
  PAN("5A", "Valid cardholder account number"),
  CDOL1("8C", "List of data objects (tag and length) to be passed to the ICC in the first GENERATE AC command"),
  CARD_AUTH_RELATED_DATA("9F69",
      "VISA-specific: Contains the fDDA Version Number, Card Unpredictable Number, and Card Transaction Qualifiers.\n" +
          "For transactions where fDDA is performed, the Card Authentication Related Data is returned in the last record specified by the Application File Locator for that transaction."),
  ISSUER_PUBLIC_KEY_CERT("90", "Issuer public key certified by a certification authority");

  private static final Map<String, NamedEmvTag> EMV_TAG_BY_ID = EnumSet.allOf(NamedEmvTag.class)
      .stream()
      .collect(Collectors.toMap(NamedEmvTag::getId, Function.identity()));

  private final String id;
  private final String description;

  NamedEmvTag(String id, String description) {
    this.id = id;
    this.description = description;
  }

  public static NamedEmvTag emvTag(String tag) {
    return EMV_TAG_BY_ID.get(tag);
  }

  public static Optional<NamedEmvTag> emvTagOptional(String tag) {
    return Optional.ofNullable(emvTag(tag));
  }
}
